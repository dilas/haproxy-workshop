global
	log 127.0.0.1 local0
	log 127.0.0.1 local1 debug
	stats socket /Users/dilas/Projects/haproxy/admin.sock mode 660 level admin # habilita Unix domain socket para linha de comando
	maxconn 4096              # numero maximo de conexoes simultaneas, depois disso queue na kernel
	# daemon                  # roda em background
	description HAProxy Grupo Caixa Seguradora

defaults
	log global                # usa a configuracao global de log definida acima
	mode http                 # habilita o modo de proxy reverso layer 7 (http)
	timeout connect 5000      # ms para aguardar estabelecer conexao com o backend
	timeout client  50000     # ms para aguardar o cliente (browser por exemplo) 
	timeout server  50000     # ms para aguardar o servidor no backend
	option httplog            # habilita o log verboso de http
	option dontlognull        # nao loga quando uma requisicao nao enviar dados
	balance roundrobin        # define o algoritmo de balanceamento padrao

listen statspage
	bind *:9000
	stats enable              # habilita a interface grafica de informacoes (por padrao na uri /haproxy?stats)
	stats uri /report         # define a uri para a interface grafica
	stats refresh 10s         # atualiza a cada 10 segundos a interface grafica
	stats auth admin:password # define usuario e senha para acesso a interface grafica
	stats show-desc           # exibe descricao global
	stats show-legends        # exibe legenda nos servidores
	stats admin if TRUE       # habilita funcoes de administracao

frontend frontend-microservices                                  # define o proxy reverso
	bind *:8000                                                  # bind em todas interfaces	
	option forwardfor                                            # captura o ip do cliente e seta no header X-Forwarded-For
	acl is_app1 path_beg -i /app1                                # verifica se app1
	acl is_app2 path_beg -i /app2                                # verifica se app2
	
	# outros exemplos de ACL

	# path        - url exata
	# path_beg    - url inicio
	# path_dir    - sub-diretorio da url (exemplo /shirts em /shirts/blue)
	# path_end    - url sufixo (exemplo .jpg .png)
	# path_len    - url tamanho
	# path_reg    - url expressao regular ( exemplo (png|jpg|jpeg|gif)$ )
	# path_sub    - url sub-string

	# acl is_west url_param(region) -i -m srt west wc - verifica parametros na url
	
	# acl is_mobile req.hdr(User-Agent) -i -m reg (android|iphone) - verifica o header user-agent para direcionar (site mobile)

	# acl is_site_barato req.hdr(Host) -i -m str www.barato.com.br barato.com.br - verifica o header host para direcionar
	# acl is_site_caro req.hdr(Host) -i -m str www.caro.com.br  caro.com.br - verifica o header host para direcionar

	# redirect prefix http://outro-dominio.com if is_dominio_velho - redireciona para outro dominio mantendo a url
	# redirect location http://outro-dominio.com if is_dominio_velho - redireciona para outro dominio sem manter a url

	use_backend backend-microservices-app1 if is_app1            # direciona para app1
	use_backend backend-microservices-app2 if is_app2            # direciona para app2
	default_backend backend-microservices                        # backend padrao para requisicoes gerais

backend backend-microservices-app1                  # define um pool de servidores que as requisicoes serao encaminhadas
	description Micro-Servicos App1
	server server1 127.0.0.1:5001               # define um servidor

backend backend-microservices-app2
	description Micro-Servicos App2
	server server2 127.0.0.1:5002               # define outro servidor

backend backend-microservices
	description Micro-Servicos Gerais
	server server3 127.0.0.1:5003               # mais um